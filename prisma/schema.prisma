// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prismaを使用
generator client {
  provider = "prisma-client-js"
}

// 接続先は.envファイルで定義
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "ER.svg"
}

// テーブル定義
// 部署
model Departments {
  id        String      @id @default(cuid())
  name      String      @unique
  user      User[]
  taskTypes TaskTypes[]
  @@map("departments")

}

model TaskTypes {
  id   String @id @default(cuid())
  name String @unique

  // relation
  departmentId String
  department   Departments @relation(fields: [departmentId], references: [id])
  tasks        Tasks[]

  @@map("taskTypes")
}

// 認証用アカウント
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// セッション用
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// セッショントークン
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ユーザータイプ
model UserTypes {
  id          String @id @default(cuid())
  name        String @unique
  user        User[]

  @@map("userTypes")

}

// ユーザータイプ
model UserPosts {
  id          String @id @default(cuid())
  name        String @unique
  user        User[]

  @@map("userPosts")
}

// ユーザー
model User {
  id             String    @id @default(cuid())
  name           String
  username       String    @unique//ログイン用ユーザーネーム
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  hashedPassword String // パスワード

  // relation
  departmentId String // This field is added
  department   Departments @relation(fields: [departmentId], references: [id])

  // relation
  typeId String // This field is added
  type   UserTypes @relation(fields: [typeId], references: [id])

  // relation
  postId String // This field is added
  post   UserPosts @relation(fields: [postId], references: [id])

  // ディレクターID 1対多
  systems  Systems[]
  devices  Devices[]
  projects Projects[]
  tasks    Tasks[]
  reports  Reports[]

  // 多対多
  manageProjects Projects[] @relation("ProjectManagers") // プロジェクト担当者
  managers       Tasks[]    @relation("TaskManagers")
  viewReports    Reports[]  @relation("ReportViewers") // レポート閲覧履歴管理

  @@map("users")
}

// クライアント
model Clients {
  id   String @id @default(cuid())
  name String @unique

  // relation
  system Systems[]

  // datetime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("clients")

}

// システムテーブルの定義
model Systems {
  id        String  @id @default(cuid())
  name      String
  model     String?
  total_cnt String?

  // relation
  clientId String
  client   Clients   @relation(fields: [clientId], references: [id])
  device   Devices[]

  directorId String
  director   User   @relation(fields: [directorId], references: [id])

  // datetime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("systems")
}

// デバイス
model Devices {
  id    String  @id @default(cuid())
  name  String
  model String?

  // ディレクター
  directorId String
  director   User   @relation(fields: [directorId], references: [id])

  // relation
  systemId String
  system   Systems    @relation(fields: [systemId], references: [id])
  project  Projects[]

  // datetime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("devices")
}

// プロジェクト種別
model ProjectTypes {
  id       String     @id @default(cuid())
  name     String     @unique
  projects Projects[]

  @@map("projectTypes")
}

// ステータス
model Status {
  id   String @id @default(cuid())
  name String @unique

  // relation
  projects Projects[]
  tasks    Tasks[]

  @@map("status")
}

// プロジェクト
model Projects {
  id   String @id @default(cuid())
  name String

  startDate DateTime?
  limitDate DateTime?
  endDate DateTime?

  // 状態
  statusId String
  status   Status @relation(fields: [statusId], references: [id])

  // 種別
  typeId String
  type   ProjectTypes @relation(fields: [typeId], references: [id])

  // ディレクター
  directorId String
  director   User   @relation(fields: [directorId], references: [id])

  // relation
  deviceId String
  device   Devices @relation(fields: [deviceId], references: [id])
  task     Tasks[]

  // 多対多
  projectManagers User[] @relation("ProjectManagers") // プロジェクト担当者

  // datetime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("projects")

}

// タスク
model Tasks {
  id        String @id @default(cuid())
  name      String
  startDate DateTime?
  limitDate DateTime?
  endDate DateTime?

  // 状態
  statusId String
  status   Status @relation(fields: [statusId], references: [id])

  // ディレクター
  directorId String
  director   User   @relation(fields: [directorId], references: [id])

  // relation
  projectId String
  project   Projects  @relation(fields: [projectId], references: [id])
  report    Reports[]

  typeId String
  type   TaskTypes @relation(fields: [typeId], references: [id])

  managers User[] @relation("TaskManagers")

  // datetime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tasks")
}

// レポート
model Reports {
  id        String @id @default(cuid())
  name      String
  reportPath String?
  zipPath String?
  checkedAt DateTime?

  // ディレクター
  directorId String
  director   User   @relation(fields: [directorId], references: [id])

  // relation
  taskId String
  task   Tasks  @relation(fields: [taskId], references: [id])

  // 閲覧履歴 多対多
  reporViewers User[] @relation("ReportViewers") // レポート閲覧履歴管理

  // datetime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reports")
}
